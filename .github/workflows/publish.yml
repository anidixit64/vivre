name: Publish Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Install spaCy models
      run: |
        poetry run python -m spacy download en_core_web_sm
        poetry run python -m spacy download es_core_news_sm
        poetry run python -m spacy download fr_core_news_sm
        poetry run python -m spacy download it_core_news_sm

    - name: Run linting and formatting checks
      run: |
        poetry run ruff format --check .
        poetry run ruff check . --ignore E501

    - name: Run type checking
      run: poetry run mypy src/ tests/

    - name: Run tests with coverage
      run: poetry run pytest --cov=vivre --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.repository_owner == 'anidixit64'
      with:
        fail_ci_if_error: true
        verbose: true

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.python-version }}
        path: dist/
        retention-days: 1

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies with docs
      run: poetry install --with docs

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: docs/build/html/
        retention-days: 30

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build-docs]
    if: success()
    environment:
      name: pypi
      url: https://pypi.org/p/vivre

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build package
      run: poetry build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true

    - name: Publish to Test PyPI (optional)
      uses: pypa/gh-action-pypi-publish@release/v1
      if: ${{ secrets.TEST_PYPI_API_TOKEN != '' }}
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true

  upload-docs-to-release:
    name: Upload Documentation to Release
    runs-on: ubuntu-latest
    needs: [publish, build-docs]
    if: success()
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs
        path: docs/

    - name: Upload documentation to release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: ./docs/**/*
        draft: false
        prerelease: false

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish, upload-docs-to-release]
    if: success()
    steps:
    - name: Notify on success
      run: |
        echo "‚úÖ Package successfully published to PyPI!"
        echo "üì¶ Version: ${{ github.event.release.tag_name }}"
        echo "üîó PyPI: https://pypi.org/p/vivre"
        echo "üìö Documentation: https://vivre.readthedocs.io/"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [test, build-docs, publish, upload-docs-to-release]
    if: failure()
    steps:
    - name: Notify on failure
      run: |
        echo "‚ùå Package publishing failed!"
        echo "üîç Check the workflow logs for details."
        echo "üìã Failed job: ${{ needs.*.result }}"
