name: Publish Package

# Use a single, authoritative trigger to prevent duplicate runs.
# 'published' is better than 'created' as it fires only on the final click.
on:
  release:
    types: [published]
  # Keep workflow_dispatch for manual runs.
  workflow_dispatch:

jobs:
  # Job 1: Build the package and documentation once, then pass them as artifacts.
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Build package
        run: poetry build

      - name: Store package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 1

      - name: Build documentation
        run: |
          poetry install --with docs
          poetry run sphinx-build -b html docs/source docs/build/html

      - name: Store documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/build/html/
          retention-days: 1

  # Job 2: Publish to TestPyPI for verification.
  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    # Only run this job for pre-releases. This is your safety gate.
    if: github.event.release.prerelease

    steps:
      - name: Download all the artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          packages_dir: artifacts/python-package/

  # Job 3: Publish to the real PyPI for final releases.
  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    # Only run this job if it's NOT a pre-release. This is your main release gate.
    if: github.event.release.prerelease == false
    environment:
      name: pypi
      url: https://pypi.org/p/vivre
    permissions:
      id-token: write # Required for trusted publishing

    steps:
      - name: Download all the artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: artifacts/python-package/
          # No password needed due to trusted publishing and environment setup.

  # Job 4: Deploy documentation to GitHub Pages (Example).
  # This is a better practice than uploading a zip to the release.
  deploy-docs:
    name: Deploy Documentation
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-html
          path: ./docs-dist

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs-dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 5: Notification of success.
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    # This job now runs if either of the publish jobs succeeds.
    needs: [publish-to-testpypi, publish-to-pypi]
    # 'always()' ensures it runs, 'success()' checks the outcome of dependencies.
    if: always() && (needs.publish-to-pypi.result == 'success' || needs.publish-to-testpypi.result == 'success')
    steps:
      - name: Notify on success
        run: |
          echo "âœ… Package successfully published!"
          echo "ðŸ“¦ Version: ${{ github.event.release.tag_name }}"
          if ( ${{ needs.publish-to-pypi.result == 'success' }} ); then
            echo "ðŸ”— PyPI: https://pypi.org/p/vivre/${{ github.event.release.tag_name }}"
          else
            echo "ðŸ”— TestPyPI: https://test.pypi.org/p/vivre/${{ github.event.release.tag_name }}"
          fi
