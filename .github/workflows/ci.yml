# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Set up dependency cache
      uses: actions/cache@v4
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project in editable mode
      run: poetry install --no-interaction

    - name: Install spaCy models
      run: |
        poetry run python -m spacy download en_core_web_sm
        poetry run python -m spacy download es_core_news_sm
        poetry run python -m spacy download fr_core_news_sm
        poetry run python -m spacy download it_core_news_sm

    # --- THIS STEP IS UPDATED ---
    - name: Run linter and formatter checks
      run: |
        # Check if code is formatted correctly with Ruff's formatter.
        # This replaces the `black --check` command.
        poetry run ruff format --check .

        # Check for linting errors with Ruff.
        # This replaces flake8 and isort.
        # The E501 (line-too-long) rule is handled by the formatter,
        # so ignoring it here is good practice.
        poetry run ruff check . --ignore E501

    - name: Run static type analysis
      run: poetry run mypy src/ tests/

    - name: Run tests with coverage
      run: poetry run pytest --cov=vivre --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.repository_owner == 'anidixit64' # Only run on your repo, not forks
      with:
        fail_ci_if_error: true
        verbose: true
