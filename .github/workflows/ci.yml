name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --only=main,dev

    - name: Install spaCy models
      run: |
        poetry run python -m spacy download en_core_web_sm
        poetry run python -m spacy download es_core_news_sm
        poetry run python -m spacy download fr_core_news_sm
        poetry run python -m spacy download it_core_news_sm

    - name: Run black (check mode)
      run: poetry run black --check --diff .

    - name: Run isort (check mode)
      run: poetry run isort --check-only --diff .

    - name: Run ruff (check mode)
      run: poetry run ruff check .

    - name: Run flake8
      run: poetry run flake8 .

    - name: Run mypy
      run: poetry run mypy src/ tests/

    - name: Run tests
      run: poetry run pytest tests/ --cov=src/vivre --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
