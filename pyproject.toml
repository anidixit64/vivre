[tool.poetry]
name = "vivre"
version = "0.1.0"
description = "A Python library for machine learning and corpus linguistics"
authors = ["Aniket Dixit <aniketdixit00.ani@gmail.com>"]
readme = "README.md"
packages = [
    {include = "vivre", from = "src"}
]

[tool.poetry.scripts]
vivre = "vivre.cli:app"

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
requests = "^2.32.4"
pytest = "^8.4.1"
ebooklib = "^0.19"
nltk = "^3.9.1"
spacy = "^3.8.7"
numpy = "^2.3.1"
typer = "^0.16.0"
rich = "^14.0.0"
defusedxml = "^0.7.1"
scipy = "^1.16.0"
langdetect = "^1.0.9"
beautifulsoup4 = "^4.13.4"
lxml = "^6.0.0"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
flake8 = "^7.3.0"
mypy = "^1.17.0"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
ruff = "^0.12.4"
isort = "^6.0.1"
pre-commit = "^4.2.0"
bandit = "^1.7.5"
safety = "^2.3.5"
types-defusedxml = "^0.7"
scipy-stubs = "^1.16.0.2"

[tool.coverage.run]
source = ["src/vivre"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except OSError:",
    "except ET.ParseError:",
    "except FileNotFoundError:",
    "except ValueError:",
    "except zipfile.BadZipFile:",
    "except ET.ParseError as e:",
    "except Exception:",
    "raise OSError",
    "raise ValueError",
    "raise FileNotFoundError",
    "raise zipfile.BadZipFile",
    "if not text or not text.strip\\(\\):",
    "if not title or title == \"Untitled Chapter\":",
    "if variation and variation != title:",
    "if len\\(title_words\\) >= 2:",
    "if lang_code not in self._supported_languages:",
    "if lang_code not in self._models:",
    "if title == \"Untitled Chapter\" and text.strip\\(\\):",
    "if title and title != \"Untitled Chapter\":",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["vivre"]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
